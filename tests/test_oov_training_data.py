from nomoroov.oov_training_data import cook_training_data, InMemoryDataCollector

import pytest


test_parameters = [
    (
        iter(range(1, 5)),
        set([(1, 2), (2, 3), (3, 4), (2, 4), (1, 3), (1, 4)])
    ),
    (
        iter(range(1, 6)),
        set([(1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (2, 4), (2, 5), (1, 3), (1, 4), (1, 5)])
    ),
    (
        iter(range(1, 7)),
        set([(1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (2, 4), (2, 5), (1, 3), (1, 4), (1, 5)]),
    ),
    (
        iter(range(1, 8)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (2, 4), (2, 5), (1, 3), (1, 4), (1, 5),
                (6, 7)
            ]
        ),
    ),
    (
        iter(range(1, 9)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (2, 4), (2, 5), (1, 3), (1, 4), (1, 5),
                (6, 7), (6, 8), (7, 8)
            ]
        ),
    ),
    (
        iter(range(1, 10)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9),
                (7, 9), 
                (6, 8), (6, 9)
            ]
        ),
    ),
    (
        iter(range(1, 11)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9), (9, 10),
                (8, 10),
                (7, 9), (7, 10),
                (6, 8), (6, 9), (6, 10),
            ]
        ),
    ),
    (
        iter(range(1, 12)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9), (9, 10),
                (8, 10),
                (7, 9), (7, 10),
                (6, 8), (6, 9), (6, 10),
            ]
        ),
    ),
    (
        iter(range(1, 16)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9), (9, 10),
                (8, 10),
                (7, 9), (7, 10),
                (6, 8), (6, 9), (6, 10),
                (11, 12), (12, 13), (13, 14), (14, 15),
                (13, 15),
                (12, 14), (12, 15),
                (11, 13), (11, 14), (11, 15),
            ]
        ),
    ),
    (
        iter(range(1, 17)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9), (9, 10),
                (8, 10),
                (7, 9), (7, 10),
                (6, 8), (6, 9), (6, 10),
                (11, 12), (12, 13), (13, 14), (14, 15),
                (13, 15),
                (12, 14), (12, 15),
                (11, 13), (11, 14), (11, 15),
            ]
        ),
    ),
    (
        iter(range(1, 20)),
        set(
            [
                (1, 2), (2, 3), (3, 4), (4, 5),
                (3, 5),
                (2, 4), (2, 5),
                (1, 3), (1, 4), (1, 5),
                (6, 7), (7, 8), (8, 9), (9, 10),
                (8, 10),
                (7, 9), (7, 10),
                (6, 8), (6, 9), (6, 10),
                (11, 12), (12, 13), (13, 14), (14, 15),
                (13, 15),
                (12, 14), (12, 15),
                (11, 13), (11, 14), (11, 15),
                (16, 17), (17, 18), (18, 19),
                (17, 19),
                (16, 18), (16, 19)
            ]
        ),
    ),
]


@pytest.mark.parametrize("list_of_item,expected", test_parameters)
def test_cook_training_data(list_of_item, expected):
    data_collector = InMemoryDataCollector()

    cook_training_data(list_of_item, data_collector=data_collector, window_size=5)

    assert expected == set(data_collector.data)
